'use strict';
/*

Code generated by Sequelize. It scans through the models directory and automatically imports all model files

*/
//console.log("Running index.js - Begin file");

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';


//const config = require(__dirname + '/../../config/config.json')[env];


//const config = require(__dirname + '/../../config/env_config.js')[env]; // not using seqeuzlize config file, adapting it to use dockercompose environment.


//Defining the config based on the env (from docker) , otherwise we use some basic configuration for testing (local host etc).
const config = {
  username: process.env.DB_USERNAME || "root",
  password: process.env.DB_PASSWORD || "root",
  database: process.env.DB_DATABASE || "my_database",
  host: process.env.DB_HOST || "127.0.0.1",
  port: process.env.DB_PORT || 3306,
  dialect: process.env.DB_DIALECT || "mariadb"
};

//console.log("CONFIGURATION USED :", config);
const db = {};

let sequelize;
//connect to db;
if (config.use_env_variable) {
  
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}


fs
  .readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

 
Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;


